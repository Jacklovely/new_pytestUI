{
  "uid" : "44a6e926059a969",
  "name" : "test_fail_login[错误用户名正确密码登录]",
  "fullName" : "case.test_login.Test_login#test_fail_login",
  "historyId" : "fe7b55862401e4394a2ca4a1727ac39c",
  "time" : {
    "start" : 1607929129212,
    "stop" : 1607929168834,
    "duration" : 39622
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <case.test_login.Test_login object at 0x00000268912B6388>\nusername = 'hanxi.com', password = 'li..668566'\nmsg = 'Incorrect username or password.'\n\n    @allure.story(\"用例：用户登录\")\n    @pytest.mark.parametrize(\"username,password,msg\", testdata[\"login_fail_data\"],\n                             ids=[\"错误用户名正确密码登录\"])\n    # @pytest.mark.skip('跳过')\n    def test_fail_login(self,username,password,msg):\n        driver = Base().chromeDriver\n        web = LoginPage(driver)\n>       web.login(user=username,password=password)\n\ncase\\test_login.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:36: in login\n    self.input_username(user)\npages\\login_page.py:23: in input_username\n    self.input(self.loc1, text)\ncommon\\base.py:71: in input\n    ele = self.find(locator)\ncommon\\base.py:52: in find\n    raise msg\ncommon\\base.py:49: in find\n    ele = WebDriverWait(self.driver, self.timeout, self.t).until(EC.presence_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"41a52db3c5e0be9d668948dd46a475a3\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x00000268912E0A48>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_verify_url",
    "time" : {
      "start" : 1607929111022,
      "stop" : 1607929111022,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1607929110950,
      "stop" : 1607929111021,
      "duration" : 71
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1607929111022,
      "stop" : 1607929111022,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <case.test_login.Test_login object at 0x00000268912B6388>\nusername = 'hanxi.com', password = 'li..668566'\nmsg = 'Incorrect username or password.'\n\n    @allure.story(\"用例：用户登录\")\n    @pytest.mark.parametrize(\"username,password,msg\", testdata[\"login_fail_data\"],\n                             ids=[\"错误用户名正确密码登录\"])\n    # @pytest.mark.skip('跳过')\n    def test_fail_login(self,username,password,msg):\n        driver = Base().chromeDriver\n        web = LoginPage(driver)\n>       web.login(user=username,password=password)\n\ncase\\test_login.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:36: in login\n    self.input_username(user)\npages\\login_page.py:23: in input_username\n    self.input(self.loc1, text)\ncommon\\base.py:71: in input\n    ele = self.find(locator)\ncommon\\base.py:52: in find\n    raise msg\ncommon\\base.py:49: in find\n    ele = WebDriverWait(self.driver, self.timeout, self.t).until(EC.presence_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"41a52db3c5e0be9d668948dd46a475a3\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x00000268912E0A48>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a6a83a76243d2166",
      "name" : "log",
      "source" : "a6a83a76243d2166.txt",
      "type" : "text/plain",
      "size" : 10627
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "用例：用户登录"
  }, {
    "name" : "feature",
    "value" : "功能点：用户登录页面"
  }, {
    "name" : "parentSuite",
    "value" : "case"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "Test_login"
  }, {
    "name" : "host",
    "value" : "PC-20200723MDZP"
  }, {
    "name" : "thread",
    "value" : "19252-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "msg",
    "value" : "'Incorrect username or password.'"
  }, {
    "name" : "password",
    "value" : "'li..668566'"
  }, {
    "name" : "username",
    "value" : "'hanxi.com'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "44a6e926059a969.json",
  "parameterValues" : [ "'Incorrect username or password.'", "'li..668566'", "'hanxi.com'" ]
}